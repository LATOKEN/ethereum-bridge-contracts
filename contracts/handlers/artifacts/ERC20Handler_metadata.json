{
	"compiler": {
		"version": "0.6.4+commit.1dca32f3"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "bridgeAddress",
						"type": "address"
					},
					{
						"internalType": "bytes32[]",
						"name": "initialResourceIDs",
						"type": "bytes32[]"
					},
					{
						"internalType": "address[]",
						"name": "initialContractAddresses",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "burnableContractAddresses",
						"type": "address[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "_bridgeAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "_burnList",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "_contractWhitelist",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes8",
						"name": "",
						"type": "bytes8"
					},
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"name": "_depositRecords",
				"outputs": [
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					},
					{
						"internalType": "bytes8",
						"name": "_destinationChainID",
						"type": "bytes8"
					},
					{
						"internalType": "bytes32",
						"name": "_resourceID",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_destinationRecipientAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_depositer",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "_resourceIDToTokenContractAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "_tokenContractAddressToResourceID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "resourceID",
						"type": "bytes32"
					},
					{
						"internalType": "bytes8",
						"name": "destinationChainID",
						"type": "bytes8"
					},
					{
						"internalType": "uint64",
						"name": "depositNonce",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "depositer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipientAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "resourceID",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "recipientAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "executeProposal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "fundERC20",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "depositNonce",
						"type": "uint64"
					},
					{
						"internalType": "bytes8",
						"name": "destId",
						"type": "bytes8"
					}
				],
				"name": "getDepositRecord",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "_tokenAddress",
								"type": "address"
							},
							{
								"internalType": "bytes8",
								"name": "_destinationChainID",
								"type": "bytes8"
							},
							{
								"internalType": "bytes32",
								"name": "_resourceID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "_destinationRecipientAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "_depositer",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "_amount",
								"type": "uint256"
							}
						],
						"internalType": "struct ERC20Handler.DepositRecord",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "setBurnable",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "resourceID",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "setResource",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "ChainSafe Systems.",
			"methods": {
				"constructor": {
					"details": "{initialResourceIDs} and {initialContractAddresses} must have the same length (one resourceID for every address). Also, these arrays must be ordered in the way that {initialResourceIDs}[0] is the intended resourceID for {initialContractAddresses}[0].",
					"params": {
						"bridgeAddress": "Contract address of previously deployed Bridge.",
						"burnableContractAddresses": "These addresses will be set as burnable and when {deposit} is called, the deposited token will be burned. When {executeProposal} is called, new tokens will be minted.",
						"initialContractAddresses": "These are the addresses the {initialResourceIDs} will point to, and are the contracts that will be called to perform various deposit calls.",
						"initialResourceIDs": "Resource IDs are used to identify a specific contract address. These are the Resource IDs this contract will initially support."
					}
				},
				"deposit(bytes32,bytes8,uint64,address,address,uint256)": {
					"details": "Depending if the corresponding {tokenAddress} for the parsed {resourceID} is marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.",
					"params": {
						"depositNonce": "This value is generated as an ID by the Bridge contract.",
						"depositer": "Address of account making the deposit in the Bridge contract.",
						"destinationChainID": "Chain ID of chain tokens are expected to be bridged to."
					}
				},
				"fundERC20(address,address,uint256)": {
					"params": {
						"amount": "Amount of tokens to transfer.",
						"owner": "Address of current token owner.",
						"tokenAddress": "Address of ERC20 to transfer."
					}
				},
				"getDepositRecord(uint64,bytes8)": {
					"params": {
						"depositNonce": "This ID will have been generated by the Bridge contract.",
						"destId": "ID of chain deposit will be bridged to."
					},
					"returns": {
						"_0": "DepositRecord which consists of: - _tokenAddress Address used when {deposit} was executed. - _destinationChainID ChainID deposited tokens are intended to end up on. - _resourceID ResourceID used when {deposit} was executed. - _lenDestinationRecipientAddress Used to parse recipient's address from {_destinationRecipientAddress} - _destinationRecipientAddress Address tokens are intended to be deposited to on desitnation chain. - _depositer Address that initially called {deposit} in the Bridge contract. - _amount Amount of tokens that were deposited."
					}
				},
				"setBurnable(address)": {
					"params": {
						"contractAddress": "Address of contract to be used when making or executing deposits."
					}
				},
				"setResource(bytes32,address)": {
					"params": {
						"contractAddress": "Address of contract to be called when a deposit is made and a deposited is executed.",
						"resourceID": "ResourceID to be used when making deposits."
					}
				},
				"withdraw(address,address,uint256)": {
					"params": {
						"amount": "The amount of ERC20 tokens to release.",
						"recipient": "Address to release tokens to.",
						"tokenAddress": "Address of token contract to release."
					}
				}
			},
			"title": "Handles ERC20 deposits and deposit executions."
		},
		"userdoc": {
			"methods": {
				"deposit(bytes32,bytes8,uint64,address,address,uint256)": {
					"notice": "A deposit is initiatied by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: amount                      uint256     bytes   0 - 32 recipientAddress length     uint256     bytes  32 - 64 recipientAddress            bytes       bytes  64 - END"
				},
				"executeProposal(bytes32,address,uint256)": {
					"notice": "Proposal execution should be initiated when a proposal is finalized in the Bridge contract. by a relayer on the deposit's destination chain.Data passed into the function should be constructed as follows: amount                                 uint256     bytes  0 - 32 destinationRecipientAddress length     uint256     bytes  32 - 64 destinationRecipientAddress            bytes       bytes  64 - END"
				},
				"fundERC20(address,address,uint256)": {
					"notice": "Used to transfer tokens into the safe to fund proposals."
				},
				"setBurnable(address)": {
					"notice": "First verifies {contractAddress} is whitelisted, then sets {_burnList}[{contractAddress}] to true."
				},
				"setResource(bytes32,address)": {
					"notice": "First verifies {_resourceIDToContractAddress}[{resourceID}] and {_contractAddressToResourceID}[{contractAddress}] are not already set, then sets {_resourceIDToContractAddress} with {contractAddress}, {_contractAddressToResourceID} with {resourceID}, and {_contractWhitelist} to true for {contractAddress}."
				},
				"withdraw(address,address,uint256)": {
					"notice": "Used to manually release ERC20 tokens from ERC20Safe."
				}
			},
			"notice": "This contract is intended to be used with the Bridge contract."
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/handlers/ERC20Handler.sol": "ERC20Handler"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/ERC20Safe.sol": {
			"keccak256": "0x4c20b879c5882b13661b919136d0a68cd0a1525a732ce1d32ce7adf230e727aa",
			"urls": [
				"bzz-raw://d4f696104546915e238fe1ad2f4597027e4eddbb65a91bb86b6eaca86e8952d8",
				"dweb:/ipfs/QmQWpdjeE42zS92YZR65R5nLkqMoffc2b6EyoKzpMftT94"
			]
		},
		"contracts/ExampleToken.sol": {
			"keccak256": "0xff439f3cba79c9abf78f0a81130739a2b712e4a774a0f7774f9763fa8417de7c",
			"urls": [
				"bzz-raw://46cf30786949478fe25c4fa2ca090128eccc811454e837ddbc31e07f5e5d915e",
				"dweb:/ipfs/QmWBFt2pVLPc9TumePxA4SEg992ibbiTtzpijeR2QujUaN"
			]
		},
		"contracts/handlers/ERC20Handler.sol": {
			"keccak256": "0x79678dd8484fac32de6094497f622df6698067873cb2408ef070fc397f0b8b33",
			"urls": [
				"bzz-raw://13a820488e69edbc3df8fcae03c58aa31c05ad8ec57380be9a243dc5b0e165dc",
				"dweb:/ipfs/QmVVejbgjEh3Pv37SaVFc1Ejjc1k5HJ9QsDFxHC8Mzug2S"
			]
		},
		"contracts/handlers/HandlerHelpers.sol": {
			"keccak256": "0x663f15ce7bcb74f717aa8eed4708540c6d59e51231e1218b495874a2c89e0097",
			"urls": [
				"bzz-raw://661893d064ecf05e472e7b76a8487e21f375d1c5918c36ad9aef75e8df6f3352",
				"dweb:/ipfs/QmXEpxmSdXgd3tYHqqJD4XcEGnmU1bGZavYLa4tBxR7LVV"
			]
		},
		"contracts/interfaces/IDepositExecute.sol": {
			"keccak256": "0x4df3f0471424e51fc7efe60b1fb7883e97c23ee03439d3bc543a09ae3337b7ad",
			"urls": [
				"bzz-raw://b88caa3fdb3d3791f19086100efb04e666ae5dad25151c60edd7078ad793adde",
				"dweb:/ipfs/QmQZ3cutN76v6qPPSsU2yf4bi8iTRKwdgt2Njo39qVRfw1"
			]
		},
		"contracts/interfaces/IERC20.sol": {
			"keccak256": "0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5",
			"urls": [
				"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08",
				"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC"
			]
		},
		"contracts/interfaces/IERCHandler.sol": {
			"keccak256": "0x86538bf44b756628487de0eed8b13c8f8a8db6c131a72adb73074336105e0034",
			"urls": [
				"bzz-raw://39c44d3b60330ab51acf992a6da8b5fb43ba1b41ea2e80560242b24b362aeeed",
				"dweb:/ipfs/QmeUMgQDNoS5QKAkodzF1gzS5jNpt5mGJMjNq8sMd5ZV2W"
			]
		},
		"contracts/libraries/EnumerableSet.sol": {
			"keccak256": "0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164",
			"urls": [
				"bzz-raw://4580d57781513d98870d9738c7d39094336e0a70cdb90d68dad549c6ced466ec",
				"dweb:/ipfs/Qmf9YZzzRFuvMnav9dgmeRUpdYMMECiZX8w25sHWVbA18V"
			]
		},
		"contracts/libraries/SafeMath.sol": {
			"keccak256": "0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52",
			"urls": [
				"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c",
				"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR"
			]
		},
		"contracts/utils/AccessControl.sol": {
			"keccak256": "0xec20ff83741b494306b7213466f80c2280380159d87e1ce5d5e99b15f77735c0",
			"urls": [
				"bzz-raw://8e13b600b29790e6f2cb18df8d918a4b4e60637084c428e2e48b592d5920ff9d",
				"dweb:/ipfs/QmU57DJ7xhs5MEsFmq3oicrdE2A1SxBKyGRmf8qNvT9Gct"
			]
		},
		"contracts/utils/Context.sol": {
			"keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0",
			"urls": [
				"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f",
				"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"
			]
		},
		"contracts/utils/ERC20.sol": {
			"keccak256": "0x4c93af3e515f06e0e4e0c273df77bd7472d39c5a8dfa46060c202c58c9531033",
			"urls": [
				"bzz-raw://346eacaebda199d02d008f68ba6fa0a173fe2ccbc94c475732d3f9d9565cc04c",
				"dweb:/ipfs/Qmcuanps5nvBVEMgWbSsEVXda9iBmHSTyjMdvQEo7baCA1"
			]
		},
		"contracts/utils/ERC20Burnable.sol": {
			"keccak256": "0x60b0547de2cd757b179484bb06c92be19e649e4db1f4c50095b9f1a102ceac86",
			"urls": [
				"bzz-raw://781f93e1c6965f18816f34b4061166dec0d51e8a668ff9838c6bfd7a97bbc2bb",
				"dweb:/ipfs/QmQU1nKx9cpE34YFT6t3sPSBdDWJtNi64woWuParGiB6Wj"
			]
		},
		"contracts/utils/ERC20Pausable.sol": {
			"keccak256": "0x339ce3f09ac3fc5890766cbdc5051e7ba3199d46fececcecc43d7ca4f4ddc9d0",
			"urls": [
				"bzz-raw://991c82b502ea946323d1502320b4fe5281108cb19f4d617b7840520cdadd3919",
				"dweb:/ipfs/QmUUXaQDQmJkCuFd6dZnMt12mFfJFynHr4kh259RbdydS9"
			]
		},
		"contracts/utils/Pausable.sol": {
			"keccak256": "0xd995bcc6b4067ac18db610e47a2a969e8009cb311b017cdd34fc2b46c3be7020",
			"urls": [
				"bzz-raw://53e0d1dc839eb40ba23a887d302f26764eed0fe035d0e519be6a1099a1237b33",
				"dweb:/ipfs/QmbMhz1VEBxhRsz6par2rKgErxFphimiCqrmCREiusVDHv"
			]
		}
	},
	"version": 1
}